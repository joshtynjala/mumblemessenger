<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:control="com.flashtoolbox.messenger.control.*"
	xmlns:views="com.flashtoolbox.messenger.views.*"
	xmlns="*"
	layout="vertical" width="300" height="200"
	title="Mumble Messenger" showStatusBar="false"
	usePreloader="false">
		
	<!-- Cairngorm -->
	<control:MessengerController id="controller"/>
	<views:LoginForm width="100%" height="100%"/>
	
	<mx:Style source="style.css"/>
	
	<mx:Binding source="model.services" destination="services"/>
	
	<mx:Script>
		<![CDATA[
			import com.flashtoolbox.mumble.IContact;
			import com.flashtoolbox.mumble.ContactEvent;
			import com.flashtoolbox.messenger.views.ConversationWindow;
			import com.flashtoolbox.messenger.model.MessengerModelLocator;
			import com.flashtoolbox.messenger.events.LogoutEvent;
			import mx.collections.ArrayCollection;
			import com.flashtoolbox.messenger.views.ContactList;
			
	    //----------------------------------
		//  Properties
	    //----------------------------------
		
			[Bindable]
			private var model:MessengerModelLocator = MessengerModelLocator.getInstance();
			
			private var contactList:ContactList;
		
			private var conversations:Array = [];
			
			private var contactToFind:IContact;
			
			public function set services(value:ArrayCollection):void
			{
				if(value.length > 0)
				{
					if(!this.contactList)
					{
						this.createContactList();
					}
				}
				else
				{
					if(this.contactList)
					{
						this.contactList.close();
						this.contactList = null;
					}
				}
				
				this.window.visible = value.length == 0;
			}
			
	    //----------------------------------
		//  Private Methods
	    //----------------------------------
			
			private function createContactList():void
			{
				this.contactList = new ContactList();
				this.contactList.addEventListener(Event.CLOSING, mainWindowClosingHandler);
				this.contactList.open();
			}
		
			private function mainWindowClosingHandler(event:Event):void
			{
				this.closeConversations();
				this.contactList = null;
				
				var serviceCount:int = this.model.services.length;
				for(var i:int = 0; i < serviceCount; i++)
				{
					var logout:LogoutEvent = new LogoutEvent(this.model.services[i]);
					logout.dispatch();
				}
				this.visible = true;
			}
			
			private function closeConversations():void
			{				
				var conversationCount:int = this.conversations.length;
				for(var i:int = conversationCount - 1; i >= 0; i--)
				{
					var conversation:ConversationWindow = this.conversations.pop() as ConversationWindow;
					conversation.close();
				}
			}
		
			private function receiveMessageHandler(event:ContactEvent):void
			{
				this.contactToFind = event.contact;
				var matches:Array = this.conversations.filter(this.conversationIsWithContact);
				
				if(matches.length == 0)
				{
					this.openConversation(this.contactToFind, event.data as String);
				}
				
				this.contactToFind = null;
			}
		
			private function openConversation(contact:IContact, message:String = null):void
			{
				var conversation:ConversationWindow = new ConversationWindow();
				conversation.screenName = contact.service.screenName;
				conversation.contact = contact;
				
				this.conversations.push(conversation);
				/*if(message)
				{
					var messageEvent:ContactEvent = new ContactEvent(ContactEvent.RECEIVE_MESSAGE, contact);
					messageEvent.data = message;
					contact.dispatchEvent(messageEvent);
				}*/
				
				conversation.open();
			}
		
			private function conversationIsWithContact(conversation:ConversationWindow, index:int, array:Array):Boolean
			{
				return conversation.contact == this.contactToFind;
			}
				
		]]>
	</mx:Script>
</mx:WindowedApplication>